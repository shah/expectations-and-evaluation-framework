scalar NameText
scalar SmallText
scalar MediumText
scalar LargeText
scalar ExtraLargeText

scalar ErrorMessage
scalar IdentityPrincipal
scalar IdentityPassword
scalar IdentityKey

scalar Date
scalar PastDate
scalar FutureDate
scalar DateTime
scalar PastDateTime
scalar FutureDateTime
scalar Timestamp

scalar AuthenticatedSessionTimeout

scalar Result

enum TeamType {
  MARKETING
  DEVELOPMENT
}

enum DataSourceEnvironment {
  DEV
  TEST
  PRODUCTION
}

enum ExpectationPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ExpectationStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum ExpectationMetricStatus {
  ACTIVE
  INACTIVE
  PENDING
}

interface Party {
  id: ID!
  name: NameText!
}

type Person implements Party {
  id: ID!
  name: NameText!
  firstName: NameText!
  lastName: NameText!
  users: [UserIdentity]
  services: [ServiceIdentity]
}

type UserIdentity implements AuthenticationIdentity {
  id: ID!
  type: AuthenticationType!
  principal: IdentityPrincipal!
  password: IdentityPassword!
  person: Person!
}

type ServiceIdentity implements AuthenticationIdentity {
  id: ID!
  type: AuthenticationType!
  principal: IdentityPrincipal!
  key: IdentityKey!
}

type Team implements Party {
  id: ID!
  name: NameText!
  type: TeamType
  units: [Team]
  services: [ServiceIdentity]
}

type Organization implements Party {
  id: ID!
  name: NameText!
  units: [Team]
  services: [ServiceIdentity]
}

type Tenant implements Party {
  id: ID!
  name: NameText!
  org: Organization!
}

interface Timestamped {
  modifiedAt: DateTime
  createdAt: DateTime
}

# Address type identifies Address attributes for any instance of an address including standardization details (where applicable)
type Address {
  address1: MediumText!
  address2: MediumText
  city: String!
  state: State!
  zipCode: String!
  country: Country
  latitude: Float
  longitude: Float
}

type UserIdentifier {
  user: ID!
}

# I Expectation
# I ExpectationMetric 

# Objective -> Expectation
# Goal -> Expectation
# Mission -> Expectation

# KeyResult -> ExpectationMetric
# KeyPerformanceIndicator -> 


# OKR Framework OBjective
# Goal Frameworks - Goals
# Mission
# GQLGen

interface Expectation {
  expectationId: ID
  name: NameText!
  label: NameText!
  priority: ExpectationPriority
  status: expectationStatus!
  expectationStart: DateTime
  expectationEnd: FutureDateTime
}

# Need to include team,organization,party
# Performance Management

type Objective implements Expectation {
  expectationId: ID
  name: NameText!
  label: NameText!
  priority: ExpectationPriority
  status: expectationStatus!
  expectationStart: DateTime
  expectationEnd: FutureDateTime
  expectationMetric: [expectationMetric]
  users: [UserIdentifier]
  subObjectives: [Objective]
}


interface ExpectationMetric {
  expectationMetricId: ID
  name: NameText!
  label: NameText!
  status: ExpectationMetricStatus!
  result: Result
}

type KeyResult implements ExpectationMetric {
  expectationMetricId: ID
  name: NameText!
  label: NameText!
  status: ExpectationMetricStatus!
  result: Result
}

input expectationMetricInput {
  expectationMetricId: ID
  name: NameText!
  label: NameText!
  name: NameText!
  status: ExpectationMetricStatus!
  result: Result
}

input UserIdentifierInput {
  user: ID!
}

type Query {
  getExpectation: [Objective]
  getExpectationMatrix: [ExpectationMetric]
}

type Mutation {
  addObjectives(
    name: NameText!
    label: NameText
    key: NameText!
    priority: ExpectationPriority
    status: ExpectationStatus
    objectiveStart: DateTime
    objectiveEnd: FutureDateTime
    expectationMetric: expectationMetricInput
    users: [UserIdentifierInput]
  ): String

  addExpectationMetric(
    name: NameText!
    label: NameText
    key: NameText!
    priority: ExpectationPriority
    status: ExpectationMetricStatus
    Result: Result
  ): String
}

schema {
  query: Query
  mutation: Mutation
}
